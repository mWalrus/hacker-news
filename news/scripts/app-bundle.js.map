{"version":3,"sources":["../src/app.js","../src/app.html","../src/environment.js","../src/main.js","../src/resources/index.js"],"names":["App","hnTitle","hnEntries","nsTitle","nsEntries","corsURL","document","addEventListener","fetchEntries","url","hn","fetch","req","text","resText","getHNEntries","getNSEntries","textContent","xml","xmlParser","parse","items","rss","channel","item","fItems","tempTitleEl","createElement","innerHTML","title","firstChild","data","push","link","date","formatDate","pubDate","links","parseEntries","feed","entry","entries","results","match","updated","tempHTMLElement","content","value","slice","html","Parser","childNodes","length","rawAttrs","replace","dateString","Date","toDateString","time","toLocaleTimeString","debug","testing","configure","aurelia","use","standardConfiguration","feature","developmentLogging","environment","plugin","start","then","setRoot","config"],"mappings":"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","file":"app-bundle.js","sourcesContent":["import xmlParser from 'fast-xml-parser'\nimport Parser from 'fast-html-parser'\n\n/**\n * Security/Hacker news app\n */\nexport class App {\n  constructor() {\n    this.hnTitle = 'ycombinator'\n    this.hnEntries = []\n    this.nsTitle = '/r/netsec'\n    this.nsEntries = []\n    this.corsURL = 'https://cors-anywhere.herokuapp.com/' // allows cors requests from client\n    document.addEventListener('aurelia-composed', async () => {\n      this.hnEntries = await this.fetchEntries('https://news.ycombinator.com/rss', true)\n      this.nsEntries = await this.fetchEntries('https://www.reddit.com/r/netsec.rss', false)\n    })\n  }\n  /**\n   * Gets the entries from a given page\n   * @param {string} url destination homepage url\n   * @param {boolean} hn set to true if url is hacker news url\n   */\n  async fetchEntries(url, hn) {\n    const req = await fetch(this.corsURL + url)\n    const resText = await req.text()\n    if (hn) return this.getHNEntries(resText)\n    return this.getNSEntries(resText)\n  }\n\n  /**\n   * Gets the hackernews entries\n   * @param {string} textContent page content\n   */\n  getHNEntries(textContent) {\n    const xml = xmlParser.parse(textContent)\n    const items = xml.rss.channel.item\n    // Constructing new array because we want to format the dates provided\n    let fItems = []\n    for (let item of items) {\n\n      // Creating temp div to convert html character entities to their actual display characters\n      const tempTitleEl = document.createElement('div')\n      tempTitleEl.innerHTML = item.title\n      const title = tempTitleEl.firstChild.data\n\n      fItems.push({\n        title,\n        link: item.link,\n        date: this.formatDate(item.pubDate)\n      })\n    }\n    return fItems\n  }\n  \n  /**\n   * Gets the /r/netsec entries from the reddit page rss\n   * @param {string} textContent page contents \n   */\n  getNSEntries(textContent) {\n    const xml = xmlParser.parse(textContent)\n    // rss xml is structured weird so we need to parse it further\n    const links = this.parseEntries(xml.feed.entry)\n    return links\n  }\n  \n  /**\n   * Parses each entry and packages the information gathered\n   * @param {array} entries entries from rss feed \n   */\n  parseEntries(entries) {\n    let results = []\n    for (let entry of entries) {\n      \n      // if the entry is the monthly discussion or the hiring thread we skip them\n      if (entry.title.match(/(\\/r\\/netsec.+Q[1-4].+Hiring|([mM]onthly)? [dD]iscussion)/)) {\n        continue\n      }\n      \n      const title = entry.title\n      const date = this.formatDate(entry.updated)\n\n\n      // each entry has a \"link\" where one could think the would be but nah, it's empty.\n      // The link is actually hidden inside the \"content\" key which is a jumbled mess\n      // of text and html character entities.\n      // So to extract it we need to parse it:\n      // 1. We take the contents of the \"content\" key and set it as innerHTML of a temp div.\n      //    This converts the character entities into actual characters. Which is good.\n      const tempHTMLElement = document.createElement('div')\n      tempHTMLElement.innerHTML = entry.content\n      // 2. Then we extract the text with the good formatting and remove the crap we dont need.\n      const value = tempHTMLElement.firstChild.data.slice(25)\n      // 3. Now we can put the text into a html parser to grab the link.\n      const html = Parser.parse(value)\n      // 4. The link is always last in the line so we grab the rawAttrs from there.\n      let link = html.childNodes[html.childNodes.length - 1].childNodes[0].rawAttrs\n      // 5. Lastly we remove the attribute name and the quotation marks around it, and voila!\n      link = link.replace(/(href=\"|\")/g, '')\n      // 6. rss masters PogU @reddit\n      \n      results.push({\n        title,\n        link,\n        date\n      })\n    }\n    return results\n  }\n  \n  /**\n   * Formats date string into a more readable format\n   * @param {string} dateString unformatted date \n   */\n  formatDate(dateString) {\n    const date = new Date(dateString).toDateString()\n    const time = new Date(dateString).toLocaleTimeString()\n    return `${date} ${time}`\n  }\n}\n","<template>\n  <link rel=\"shortcut icon\" href=\"hacker.png\" type=\"image/x-icon\">\n  \n  <div class=\"main\">\n    <div class=\"section\" id=\"hacker-news\">\n      <h1 class=\"title\">${hnTitle}</h1>\n      <ul class=\"entries\">\n        <li class=\"entry\" repeat.for=\"entry of hnEntries\">\n          <a href=\"${entry.link}\">\n            <h2 class=\"entry-title\">\n              ${entry.title}\n            </h2>\n            <p class=\"pub-date\">${entry.date}</p>\n          </a>\n        </li>\n      </ul>\n    </div>\n    <div class=\"section\" id=\"netsec\">\n      <h1 class=\"title\">${nsTitle}</h1>\n      <ul class=\"entries\">\n        <li class=\"entry\" repeat.for=\"entry of nsEntries\">\n          <a href=\"${entry.link}\">\n            <h2 class=\"entry-title\">\n              ${entry.title}\n            </h2>\n            <p class=\"pub-date\">${entry.date}</p>\n          </a>\n        </li>\n      </ul>\n    </div>\n  </div>\n  <script src=\"./switch.js\"></script>\n</template>\n\n","export default {\n  debug: true,\n  testing: true\n};\n","// regenerator-runtime is to support async/await syntax in ESNext.\n// If you target latest browsers (have native support), or don't use async/await, you can remove regenerator-runtime.\nimport 'regenerator-runtime/runtime';\nimport environment from './environment';\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  aurelia.use.developmentLogging(environment.debug ? 'debug' : 'warn');\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","export function configure(config) {\n  //config.globalResources([]);\n}\n"]}